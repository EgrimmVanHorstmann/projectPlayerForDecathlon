// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// ICON MIXIN
// ===============

@mixin icon($position: before, $icon: false, $color: $black) {
  @if $position == both {
    $position: 'before, &:after';
  }

  &:#{$position} {
    @if $icon {
      content: '#{map-get($icons, $icon)}';
      font-style: normal;
      font-weight: normal;
      speak: none;
      text-align: center;
      text-decoration: none;
      text-decoration: none;
      color: $color;
    }
    @content;
  }
}

// TRIANGLE MIXIN
// ==============================

@mixin triangle($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $width: $width / 2;
  $height: if(length($size) > 1, $height, $height/2);

  @if $direction == up {
    border-bottom: $height solid $color;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
  } @else if $direction == right {
    border-left: $height solid $color;
    border-bottom: $width solid transparent;
    border-top: $width solid transparent;
  } @else if $direction == down {
    border-top: $height solid $color;
    border-left: $width solid transparent;
    border-right: $width solid transparent;
  } @else if $direction == left {
    border-right: $height solid $color;
    border-bottom: $width solid transparent;
    border-top: $width solid transparent;
  }
}

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

// BREAKPOINTS MIXINS

@mixin breakpoint-min($bp, $direction: 'width') {
  @media screen and (min-#{$direction}: $bp) {
    @content;
  }
}

@mixin breakpoint-max($bp, $direction: 'width') {
  @media screen and (max-#{$direction}: $bp) {
    @content;
  }
}

@mixin breakpoint-min-max($bp1, $bp2, $direction: 'width') {
  @media screen and (min-#{$direction}: $bp1) and (max-#{$direction}: $bp2) {
    @content;
  }
}

@mixin mobile() {
  @include breakpoint-max(map-get($breakpoints, 'small') - em(1)) {
    @content;
  }
}

@mixin tablet() {
  @include breakpoint-min-max(map-get($breakpoints, 'small'), map-get($breakpoints, 'large') - em(1)) {
    @content;
  }
}

@mixin desktop() {
  @include breakpoint-min(map-get($breakpoints, 'large')) {
    @content;
  }
}

@mixin max-tablet() {
  @include breakpoint-max(map-get($breakpoints, 'large')) {
    @content;
  }
}

@mixin min-tablet() {
  @include breakpoint-min(map-get($breakpoints, 'small') + em(1)) {
    @content;
  }
}

@mixin max-medium() {
  @include breakpoint-max(map-get($breakpoints, 'medium')) {
    @content;
  }
}

@mixin min-medium() {
  @include breakpoint-min(map-get($breakpoints, 'medium') + em(1)) {
    @content;
  }
}

@mixin print() {
  @media print {
    @content;
  }
}

@mixin desktop-print() {
  @include print {
    @content;
  }
  @include desktop  {
    @content;
  }
}
